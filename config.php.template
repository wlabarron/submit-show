<?php

use PHPMailer\PHPMailer\PHPMailer;
require __DIR__ . "/vendor/autoload.php";

// The base URL where this app is installed, with trailing slash.
$baseURL = "https://submit.yoursite.com/";

return array(
    // Name of group, to use in titles etc
    'organisationName' => '',

    // Show submissions database
    'database' => array(
        'server'   => 'localhost:3306',
        'database' => '',
        'user'     => '',
        'password' => '',
    ),

    // Show data. This is used to populate the dropdown list of show names.
    'showData' => array (
        // A URL to a JSON file. The JSON file should be an array of objects. This can be a relative URL and you can
        // add a JSON file like "shows.json" to the root of this project directory (see shows.json.example), or can
        // be the URL of an API endpoint elsewhere on the internet (in which case, watch out for CORS errors).
        'url'          => 'shows.json',
        // Each JSON object can have any number of keys. Let the system know the name of the key for a unique integer ID,
        // a string name of the show, and a string presenter name.
        'idKey'        => 'id',
        'nameKey'      => 'name',
        'presenterKey' => 'presenter',
     ),

    // Max size in bytes for an uploaded show file. Mixcloud's maximum is 4294967296 bytes.
    'maxShowFileSize' => '1000000000',
    'maxShowFileSizeFriendly' => '1GB', // friendly way to write the max size, used in alerts

    // Max size in bytes for an uploaded show cover image. Mixcloud's maximum is 10485760 bytes.
    'maxShowImageSize' => '5000000',
    'maxShowImageSizeFriendly' => '5MB', // friendly way to write the max size, used in alerts

    // Path to a directory which can be used for temporary storage. No trailing slash.
    'tempDirectory' => '/tmp',

    // Path to a directory where recordings are stored after they've been uploaded and before the form is submitted.
    // No trailing slash.
    'holdingDirectory' => '/tmp',

    // Path to a directory where shows can be stored after the form has been submitted but before they've been moved
    // to a final storage location. No trailing slash.
    'waitingDirectory' => '/waiting',
    
    'serverRecordings' => array (
          // Enable or disable the feature to submit shows trimmed from recordings stored on the server.
          'enabled'         => false,
          // The directory where your stream recording files are stored. The file names must start with a date in YYYY-MM-DD format, but
          // any other useful descriptive text can follow. File names will be visible to users.
          'recordingsDirectory' => "",
          // How many seconds of the start/end of a selected recording the user can listen to in order to mark the start and end of the show.
          'auditionTime'     => 900, // = 15 min
    ),

    // The storage provider where recordings should be saved.
    // Options:
    //            "local": A local directory.
    //            "s3"   : An S3-compatible storage location.
    'storageProvider' => "",

    'localStorage' => array (
        // Path to a directory where recording files can be permanently stored. No trailing slash.
        // Ignored if storage provider isn't "local".
        'uploadsDirectory' => '/uploads'
    ),

    's3Storage' => array (
        // S3 storage details. Ignored if storage provider isn't "s3".
        'endpoint'  => '',
        'region'    => '',
        'bucket'    => '',
        'accessKey' => '',
        'secret'    => '',
    ),

    // The filename format to use for submitted shows. You can use the `/` character to organise the files into
    // directories. The following variables are available:
    //      {s}   Show name
    //      {p}   Presenter name
    //      {d}   Date without leading 0
    //      {dd}  Date with leading 0
    //      {m}   Month number without leading 0
    //      {mm}  Month number with leading 0
    //      {y}   2-digit year (e.g. 21)
    //      {yy}  4-digit year (e.g. 2021)
    // The extension of the uploaded file is added automatically (i.e. if a user uploads an MP3, the final file name
    // will end in `.mp3`).
    'uploadFileName' => '{p}-{s} {y}{mm}{dd}',

    // Set this to `true` to delete the copy of the shows submitted after it's been uploaded to Mixcloud.
    // BEWARE: Changing this setting could have a profound effect on your show archive. Take great care, and make sure
    //         you've always got an up-to-date backup (but you should have that anyway, even if you're not changing
    //         this setting).
    //         Before enabling this setting, check what is in the `submissions` table of the database. Anything with a
    //         `deletion-datetime` in the past relative to your database server time will be deleted the next time the
    //         cron job runs.
    //         TAKE BACKUPS. YOU HAVE BEEN WARNED.
    'deleteStoredCopies' => false,
    // If `deleteStoredCopies` is true,  this how long a show should be kept in storage after being published to
    //                                   Mixcloud. After this period, the file is deleted.
    // If `deleteStoredCopies` is false, this is how long a show's information will be kept in the submissions
    //                                   database which powers this system. After this period, the reference to the
    //                                   show is deleted. "3 days" is a sufficient value in most cases.
    // Format at https://www.php.net/manual/en/datetime.formats.relative.php.
    'retentionPeriod' => '3 days',

    // Text appended to the description of every upload. Use '{n}' for a new line.
    'fixedDescription' => '',

    // Access token for Mixcloud account - https://www.mixcloud.com/developers/
    'mixcloudAccessToken' => '',

    // Details for YOURLS API if you wish to have short URLs in publication notification emails.
    // See https://github.com/YOURLS/YOURLS/wiki/PasswordlessAPI.
    'yourls' => array (
        'enabled'     => false,
        'apiEndpoint' => 'https://sho.rt/yourls-api.php',
        'signature'   => '',
    ),

    // SMTP server details, used for sending notification emails.
    'smtp' => array (
        'enabled'     => false,
        'server'      => '',
        'port'        => '465',
        'auth'        => true,
        'encryption'  => PHPMailer::ENCRYPTION_SMTPS, // PHPMailer::ENCRYPTION_SMTPS or PHPMailer::ENCRYPTION_STARTTLS;
        'username'    => '', // to log in to email account. Usually same as send address.
        'password'    => '',
        'sendAddress' => '', // Email address to send as. Usually same as username,
        'sendName'    => '', // Name to send as.
        'recipient'   => array(''), // Recipient address(es) of notifications whenever there's a show submitted.
    ),

    // Enable or disable SAML authentication.
    'samlEnabled'  => false,
    'samlSettings' => array(
                          // Modified from https://github.com/onelogin/php-saml/blob/master/settings_example.php.

                          // SAML Name IDs are logged to the `log` column of the database.
                          // If you set a custom SAML attribute named `email` and if SMTP is enabled above, then options
                          // to send notification emails to people submitting the form will be available.

                          // If 'strict' is True, then the PHP Toolkit will reject unsigned
                          // or unencrypted messages if it expects them signed or encrypted
                          // Also will reject the messages if not strictly follow the SAML
                          // standard: Destination, NameId, Conditions ... are validated too.
                          'strict' => true,

                          // Enable debug mode (to print errors)
                          'debug' => false,

                          // The base URL where this app is installed, with trailing slash.
                          'baseurl' => $baseURL . 'auth',

                          // Service Provider Data that we are deploying
                          'sp' => array(
                              // Identifier of the SP entity  (must be a URI)
                              'entityId' => $baseURL . 'auth/metadata.php',
                              // Specifies info about where and how the <AuthnResponse> message MUST be
                              // returned to the requester, in this case our SP.
                              'assertionConsumerService' => array(
                                  // URL Location where the <Response> from the IdP will be returned
                                  'url' => $baseURL . 'auth/acs.php',
                                  // SAML protocol binding to be used when returning the <Response>
                                  // message.  Onelogin Toolkit supports for this endpoint the
                                  // HTTP-POST binding only
                                  'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',
                              ),
                              // Specifies info about where and how the <Logout Response> message MUST be
                              // returned to the requester, in this case our SP.
                              'singleLogoutService' => array(
                                  // URL Location where the <Response> from the IdP will be returned
                                  'url' => $baseURL . 'auth/slo.php',
                                  // SAML protocol binding to be used when returning the <Response>
                                  // message.  Onelogin Toolkit supports for this endpoint the
                                  // HTTP-Redirect binding only
                                  'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
                              ),
                              // Specifies constraints on the name identifier to be used to
                              // represent the requested subject.
                              // Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
                              'NameIDFormat' => 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified',

                              // Usually x509cert and privateKey of the SP are provided by files placed at
                              // the certs folder. But we can also provide them with the following parameters
                              'x509cert' => '',
                              'privateKey' => '',

                              /*
                               * Key rollover
                               * If you plan to update the SP x509cert and privateKey
                               * you can define here the new x509cert and it will be
                               * published on the SP metadata so Identity Providers can
                               * read them and get ready for rollover.
                               */
                              // 'x509certNew' => '',
                          ),

                          // Identity Provider Data that we want connect with our SP
                          'idp' => array(
                              // Identifier of the IdP entity  (must be a URI)
                              'entityId' => '',
                              // SSO endpoint info of the IdP. (Authentication Request protocol)
                              'singleSignOnService' => array(
                                  // URL Target of the IdP where the SP will send the Authentication Request Message
                                  'url' => '',
                                  // SAML protocol binding to be used when returning the <Response>
                                  // message.  Onelogin Toolkit supports for this endpoint the
                                  // HTTP-Redirect binding only
                                  'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
                              ),
                              // SLO endpoint info of the IdP.
                              'singleLogoutService' => array(
                                  // URL Location of the IdP where the SP will send the SLO Request
                                  'url' => '',
                                  // URL location of the IdP where the SP will send the SLO Response (ResponseLocation)
                                  // if not set, url for the SLO Request will be used
                                  'responseUrl' => '',
                                  // SAML protocol binding to be used when returning the <Response>
                                  // message.  Onelogin Toolkit supports for this endpoint the
                                  // HTTP-Redirect binding only
                                  'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
                              ),
                              // Public x509 certificate of the IdP
                              'x509cert' => '',
                              /*
                               *  Instead of use the whole x509cert you can use a fingerprint in
                               *  order to validate the SAMLResponse, but we don't recommend to use
                               *  that method on production since is exploitable by a collision
                               *  attack.
                               *  (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
                               *   or add for example the -sha256 , -sha384 or -sha512 parameter)
                               *
                               *  If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
                               *  let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
                               *  'sha1' is the default value.
                               */
                              // 'certFingerprint' => '',
                              // 'certFingerprintAlgorithm' => 'sha1',

                              /* In some scenarios the IdP uses different certificates for
                               * signing/encryption, or is under key rollover phase and more
                               * than one certificate is published on IdP metadata.
                               * In order to handle that the toolkit offers that parameter.
                               * (when used, 'x509cert' and 'certFingerprint' values are
                               * ignored).
                               */
                              // 'x509certMulti' => array(
                              //      'signing' => array(
                              //          0 => '<cert1-string>',
                              //      ),
                              //      'encryption' => array(
                              //          0 => '<cert2-string>',
                              //      )
                              // ),
                          ),
   )
);
